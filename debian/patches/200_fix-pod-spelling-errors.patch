Description: Fix spelling errors in documentation
 This includes both POD and comments.
 The 'overriden -> overridden' fix may also be applied to variable names,
 but is not done with this patch.
Forwarded: https://mail-archives.apache.org/mod_mbox/perl-modperl/201004.mbox/thread
Author: Damyan Ivanov <dmn@debian.org>
Last-Update: 2011-04-10
Reviewed-by: Xavier Guimard <x.guimard@free.fr>

--- a/Apache-Test/lib/Apache/TestRequest.pm
+++ b/Apache-Test/lib/Apache/TestRequest.pm
@@ -826,7 +826,7 @@
 installed. It's best, therefore, to check C<have_lwp> before running
 tests that rely on a redirection from C<POST>.
 
-Sometimes it is desireable to have C<Apache::TestRequest> remember
+Sometimes it is desirable to have C<Apache::TestRequest> remember
 cookies sent by the pages you are testing and send them back to the
 server on subsequent requests. This is especially necessary when
 testing pages whose functionality relies on sessions or the presence
--- a/Apache-Test/lib/Apache/TestRunPHP.pm
+++ b/Apache-Test/lib/Apache/TestRunPHP.pm
@@ -234,7 +234,7 @@
 instead, it is sufficient to understand that when C<Apache::Test> calls
 C<bar.php> it feeds the results directly to C<Test::Harness>, a module
 that comes with every Perl installation, and C<Test::Harness> expects
-what it receives to be formated in a very specific way.  by itself, all
+what it receives to be formatted in a very specific way.  by itself, all
 of this is pretty useless, so C<Apache::Test> provides PHP testers with
 something much better.  here is a much better example:
 
--- a/Apache-Test/lib/Apache/TestTrace.pm
+++ b/Apache-Test/lib/Apache/TestTrace.pm
@@ -126,9 +126,9 @@
 }
 
 sub trace_level {
-    # overriden by user/-trace
+    # overridden by user/-trace
     (defined $Level && $levels{$Level}) ||
-    # or overriden by env var
+    # or overridden by env var
     (exists $ENV{APACHE_TEST_TRACE_LEVEL} &&
         $levels{$ENV{APACHE_TEST_TRACE_LEVEL}}) ||
     # or default
--- a/Apache-Test/lib/Apache/TestUtil.pm
+++ b/Apache-Test/lib/Apache/TestUtil.pm
@@ -886,7 +886,7 @@
 =item t_start_error_log_watch(), t_finish_error_log_watch()
 
 This pair of functions provides an easy interface for checking
-the presence or absense of any particular message or messages
+the presence or absence of any particular message or messages
 in the httpd error_log that were generated by the httpd daemon
 as part of a test suite.  It is likely, that you should proceed
 this with a call to one of the t_*_is_expected() functions.
--- a/ModPerl-Registry/lib/ModPerl/RegistryCooker.pm
+++ b/ModPerl-Registry/lib/ModPerl/RegistryCooker.pm
@@ -64,7 +64,7 @@
 use constant D_COMPILE => 4;
 use constant D_NOISE   => 8;
 
-# the debug level can be overriden on the main server level of
+# the debug level can be overridden on the main server level of
 # httpd.conf with:
 #   PerlSetVar ModPerl::RegistryCooker::DEBUG 4
 use constant DEBUG => 0;
--- a/docs/api/APR.pod
+++ b/docs/api/APR.pod
@@ -18,7 +18,7 @@
 
 =head1 Description
 
-On load this modules prepares the APR enviroment (initializes memory
+On load this modules prepares the APR environment (initializes memory
 pools, data structures, etc.)
 
 You don't need to use this module explicitly, since it's already
--- a/docs/api/APR/Const.pod
+++ b/docs/api/APR/Const.pod
@@ -2017,7 +2017,7 @@
 
 =back
 
-Descriptior invalid
+Descriptor invalid
 
 
 
--- a/docs/api/Apache2/Const.pod
+++ b/docs/api/Apache2/Const.pod
@@ -56,7 +56,7 @@
 modules) which may contain the same names, it's not recommended to
 import constants. I.e. you want to use the C<-compile> construct.
 
-Finaly, in Perl C<=E<gt>> is almost the same as the comma operator. It
+Finally, in Perl C<=E<gt>> is almost the same as the comma operator. It
 can be used as syntax sugar making it more clear when there is a
 key-value relation between two arguments, and also it automatically
 parses its lefthand argument (the key) as a string, so you don't need
@@ -113,7 +113,7 @@
 
 =head3 C<Apache2::Const::ITERATE>
 
-One argument, occuring multiple times (L<full
+One argument, occurring multiple times (L<full
 description|docs::2.0::user::config::custom/C_Apache2__ITERATE_>).
 
 
--- a/docs/api/Apache2/Module.pod
+++ b/docs/api/Apache2/Module.pod
@@ -413,7 +413,7 @@
 
 =head2 C<top_module>
 
-Returns the first module in the module list. Usefull to start a
+Returns the first module in the module list. Useful to start a
 module iteration.
 
   $module = Apache2::Module::top_module();
--- a/docs/api/Apache2/RequestUtil.pod
+++ b/docs/api/Apache2/RequestUtil.pod
@@ -337,7 +337,7 @@
 If the C<$key> argument is passed in the scalar context only a single
 value will be returned. Since the table preserves the insertion order,
 if there is more than one value for the same key, the oldest value
-assosiated with the desired key is returned. Calling in the scalar
+associated with the desired key is returned. Calling in the scalar
 context is also much faster, as it'll stop searching the table as soon
 as the first match happens.
 
@@ -815,7 +815,7 @@
 same code is called in a sub-request then the pnote of $r-E<gt>prev is magically 
 updated at a distance to the same value!
 
-Try explain why that is to anyone not deeply familar with perl internals!
+Try to explain why that is to anyone not deeply familiar with perl internals!
 
 The fix is to avoid pnotes taking a ref to the invisible op_targ embededed in 
 the code by passing a simple lexical variable as the actual argument. That can be done in-line like this:
--- a/docs/api/Apache2/ServerUtil.pod
+++ b/docs/api/Apache2/ServerUtil.pod
@@ -243,7 +243,7 @@
 If the C<$key> argument is passed in the scalar context only a single
 value will be returned. Since the table preserves the insertion order,
 if there is more than one value for the same key, the oldest value
-assosiated with the desired key is returned. Calling in the scalar
+associated with the desired key is returned. Calling in the scalar
 context is also much faster, as it'll stop searching the table as soon
 as the first match happens.
 
--- a/docs/api/Apache2/Util.pod
+++ b/docs/api/Apache2/Util.pod
@@ -36,7 +36,7 @@
 
 =head2 C<escape_path>
 
-convert an OS path to a URL in an OS dependant way.
+convert an OS path to a URL in an OS dependent way.
 
   $escaped_path = Apache2::Util::escape_path($path, $p);
   $escaped_path = Apache2::Util::escape_path($path, $p, $partial);
--- a/docs/api/Apache2/porting.pod
+++ b/docs/api/Apache2/porting.pod
@@ -30,7 +30,7 @@
 be used instead.
 
 C<Apache2::porting> communicates with users via the I<error_log>
-file. Everytime it traps a problem, it logs the solution (if it finds
+file. Every time it traps a problem, it logs the solution (if it finds
 one) to the error log file. If you use this module coupled with
 C<L<Apache2::Reload|docs::2.0::api::Apache2::Reload>> you will be able
 to port your applications quickly without needing to restart the
--- a/docs/api/ModPerl/MM.pod
+++ b/docs/api/ModPerl/MM.pod
@@ -55,7 +55,7 @@
 C<ModPerl::MM> will DWIM and do nothing.
 
 In case the functionality of C<ModPerl::MM> methods needs to be
-extended, rather than completely overriden, the C<ModPerl::MM> methods
+extended, rather than completely overridden, the C<ModPerl::MM> methods
 can be called internally. For example if you need to modify constants
 in addition to the modifications applied by
 C<ModPerl::MM::MY::constants>, call the C<ModPerl::MM::MY::constants>
@@ -72,7 +72,7 @@
 In certain cases a developers may want to prevent from C<ModPerl::MM>
 to override certain methods. In that case an explicit override in
 I<Makefile.PL> will do the job. For example if you don't want the
-C<constants()> method to be overriden by C<ModPerl::MM>, add to your
+C<constants()> method to be overridden by C<ModPerl::MM>, add to your
 I<Makefile.PL>:
 
   sub MY::constants { shift->MM::constants(@_); }";
@@ -89,7 +89,7 @@
 C<INC> and C<TYPEMAPS> unless they weren't passed to
 C<ModPerl::MM::WriteMakefile> from I<Makefile.PL>.
 
-If the default values aren't satisfying these should be overriden in
+If the default values aren't satisfying these should be overridden in
 I<Makefile.PL>. For example to supply an empty INC, explicitly set the
 argument in I<Makefile.PL>.
 
--- a/docs/api/ModPerl/Registry.pod
+++ b/docs/api/ModPerl/Registry.pod
@@ -67,7 +67,7 @@
 If you are trying setup a DirectoryIndex under a Location
 covered by ModPerl::Registry* you might run into some trouble.
 
-META: if this gets added to core, replace with real documenation.
+META: if this gets added to core, replace with real documentation.
 See http://marc.theaimsgroup.com/?l=apache-modperl&m=112805393100758&w=2
 
 
--- a/docs/api/ModPerl/RegistryCooker.pod
+++ b/docs/api/ModPerl/RegistryCooker.pod
@@ -25,7 +25,7 @@
 
 =item *
 
-Provide a default behavior, which can be overriden in sub-classed
+Provide a default behavior, which can be overridden in sub-classed
 
 META: in the future this functionality may move into a separate class.
 
--- a/lib/Apache2/compat.pm
+++ b/lib/Apache2/compat.pm
@@ -260,7 +260,7 @@
 }
 
 # restore_mp2_api does the opposite of override_mp2_api(), it removes
-# the overriden API and restores the original mod_perl 2.0 API
+# the overridden API and restores the original mod_perl 2.0 API
 sub restore_mp2_api {
     my (@subs) = @_;
 
--- a/lib/Apache2/porting.pm
+++ b/lib/Apache2/porting.pm
@@ -85,9 +85,9 @@
         $package =~ s|/|::|g;
         $package =~ s|.pm$||;
 
-        # this picks the original require (which could be overriden
+        # this picks the original require (which could be overridden
         # elsewhere, so we don't lose that) because we haven't
-        # overriden it yet
+        # overridden it yet
         return require $_[0] unless $packages{$package};
 
         my $msg = "mod_perl 2.0 API doesn't include package '$package'.";
--- a/xs/APR/Pool/APR__Pool.h
+++ b/xs/APR/Pool/APR__Pool.h
@@ -49,7 +49,7 @@
 #define MP_APR_POOL_SV_HAS_OWNERSHIP(sv) mpxs_pool_is_custom(sv)
 
 /* before the magic is freed, one needs to carefully detach the
- * dependant pool magic added by mpxs_add_pool_magic (most of the time
+ * dependent pool magic added by mpxs_add_pool_magic (most of the time
  * it'd be a parent pool), and postpone its destruction, until after
  * the child pool is destroyed. Since if we don't do that the
  * destruction of the parent pool will destroy the child pool C guts
--- a/todo/bugs_build
+++ b/todo/bugs_build
@@ -71,7 +71,7 @@
 
 * we have a dependency check problem when xs/*/*.h use code from
   xs/modperl_xs*.h, when the latter change 'make' won't rebuild the
-  dependant files
+  dependent files
 
 * Testing:
   Need to put Philippe's smoking test into the core
--- a/docs/user/intro/overview.pod
+++ b/docs/user/intro/overview.pod
@@ -279,7 +279,7 @@
 
 =item *
 
-The I<warnings> pragma, which allows to force the code to be super
+The I<warnings> pragma, which allows one to force the code to be super
 clean, via the setting:
 
   use warnings FATAL => 'all';
--- a/docs/user/handlers/http.pod
+++ b/docs/user/handlers/http.pod
@@ -1580,7 +1580,7 @@
 a cleanup code, for example removing temporarily created files. The
 less obvious is to use this phase instead of
 C<L<PerlLogHandler|/PerlLogHandler>> if the logging operation is time
-consuming. This approach allows to free the client as soon as the
+consuming. This approach allows one to free the client as soon as the
 response is sent.
 
 This phase is of type
--- a/docs/user/coding/coding.pod
+++ b/docs/user/coding/coding.pod
@@ -300,7 +300,7 @@
   no warnings 'redefine';
   use warnings 'redefine';
 
-Perl 5.8.0 allows to do all this in one line:
+Perl 5.8.0 allows one to do all this in one line:
 
   use warnings FATAL => 'all', NONFATAL => 'redefine';
 
--- a/docs/api/Apache2/SizeLimit.pod
+++ b/docs/api/Apache2/SizeLimit.pod
@@ -147,7 +147,7 @@
 to make it into the vanilla kernel in the near future.
 
 F</proc/self/smaps> reports various sizes for each memory segment of a
-process and allows to count the amount of shared memory correctly.
+process and allows one to count the amount of shared memory correctly.
 
 If C<Apache2::SizeLimit> detects a kernel that supports F</proc/self/smaps>
 and if the C<Linux::Smaps> module is installed it will use them instead of
--- a/docs/api/Apache2/RequestRec.pod
+++ b/docs/api/Apache2/RequestRec.pod
@@ -804,7 +804,7 @@
 
 =back
 
-See also C<L<err_headers_out|/C_err_headers_out_>>, which allows to
+See also C<L<err_headers_out|/C_err_headers_out_>>, which allows one to
 set headers for non-2xx responses and persist across internal
 redirects.
 
--- a/docs/api/ModPerl/RegistryLoader.pod
+++ b/docs/api/ModPerl/RegistryLoader.pod
@@ -175,7 +175,7 @@
 C<ModPerl::RegistryLoader> performs a very simple job, at run time it
 loads and sub-classes the module passed via the I<package> attribute
 and overrides some of its functions, to emulate the run-time
-environment. This allows to preload the same script into different
+environment. This allows one to preload the same script into different
 registry environments.
 
 =head1 Authors
--- a/docs/devel/core/mod_perl_specific.pod
+++ b/docs/devel/core/mod_perl_specific.pod
@@ -131,7 +131,7 @@
                        retrieve ctx->handler
   modperl_output_filter_handler -> modperl_run_filter -> modperl_callback
 
-This trick allows to have more than one filter handler in the filters
+This trick allows one to have more than one filter handler in the filters
 chain using the same Apache filter name (the real filter's name is
 stored in ctx-E<gt>handler-E<gt>name.
 
--- a/Apache-Test/lib/Apache/Test.pm
+++ b/Apache-Test/lib/Apache/Test.pm
@@ -765,7 +765,7 @@
 
 =item sok
 
-Allows to skip a sub-test, controlled from the command line.  The
+Allows one to skip a sub-test, controlled from the command line.  The
 argument to sok() is a CODE reference or a BLOCK whose return value
 will be passed to ok(). By default behaves like ok(). If all sub-tests
 of the same test are written using sok(), and a test is executed as:
